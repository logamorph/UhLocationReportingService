package threedlite.userhash;

import java.io.IOException;
import java.util.Collections;
import java.util.Map;
import java.util.TreeMap;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import sun.misc.BASE64Decoder;

/*

   Copyright 2013 Dan Meany

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/



/**
 * Servlet implementation class UserHash
 * 
 * https://192.241.144.52/userhash/userhash?command=list+username
 * https://192.241.144.52/userhash/userhash?command=set+asdf=1\nzxcv=2
 * 
 * Compile with jdk6 for tomcat7/default-jdk ubuntu package
 * 
 */
@WebServlet("/userhash")
public class UserHash extends HttpServlet {

	private static final long serialVersionUID = 1L;

	private static Map<String, String> map = Collections.synchronizedMap(new TreeMap<String, String>());


	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public UserHash() {
		super();
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doUserHash(request, response);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doUserHash(request, response);
	}

	private String getUsername(HttpServletRequest request) throws IOException {
		String header = request.getHeader("Authorization"); 
		if (header == null || !header.substring(0, 6).equals("Basic ")) return null;
		String basicAuthEncoded = header.substring(6);
		String basicAuthAsString = new String(new BASE64Decoder().decodeBuffer(basicAuthEncoded));
		String username = basicAuthAsString.substring(0,basicAuthAsString.indexOf(":"));
		return username;
	}

	private boolean allow(String allowedusers, String username) {
		if (allowedusers == null) return false;
		allowedusers = allowedusers.trim();
		if (allowedusers.equals("*")) return true;
		return (" "+allowedusers+" ").contains(" "+username+" ");
	}

	private void doUserHash(HttpServletRequest request, HttpServletResponse response) throws IOException {

		String username = getUsername(request);

		String command = ""+request.getParameter("command");

//		String logmsg = "Access by " + username + ": " + command;
//		System.out.println(logmsg);

		StringBuilder result = new StringBuilder();

		// list joe.lrs.
		if (command.startsWith("list ")) {
			String prefix = command.substring(5).trim();
			int i = prefix.indexOf(".");
			if (i > -1) {
				String otheruser = prefix.substring(0,i);
				String allowedusers = map.get(otheruser+"._");
				boolean sameUser = username.equals(otheruser);
				if (sameUser || allow(allowedusers, username)) {
					for( Map.Entry<String, String> me: map.entrySet() ) {
						String key = me.getKey();
						if (key.startsWith(prefix) && (sameUser ||!key.contains("_"))) {
							key = key.substring(prefix.length());
							String value = me.getValue();
							result.append(key).append("=").append(value).append("\n");
						}
					}
				}
			}
		}

		// set mykey=myvalue\nmkyey2=value2
		if (command.startsWith("set ")) {
			String kvs = command.substring(4);
			String[] akvs= kvs.split("\n");
			for (String kv: akvs) {
				String key = kv.substring(0,kv.indexOf("=")).trim();
				String value = kv.substring(kv.indexOf("=")+1).trim();
				String saveKey = username + "." + key;
				if (value.trim().length() == 0) {
					map.remove(saveKey);
				} else {
					map.put(saveKey, value);
				}
				result.append(key).append("=").append(value).append("\n");
			}
		}

		response.setContentLength(result.length());
		response.setContentType("text/plain");
		response.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
		response.setHeader("Pragma", "no-cache");
		response.setHeader("Expires", "0");
	
		ServletOutputStream out = response.getOutputStream();
		out.write(result.toString().getBytes());
		out.flush();
		out.close();

	}

}
